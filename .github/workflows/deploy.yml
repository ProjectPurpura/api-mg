name: Deploy API no EC2

# Por segurança, esse workflow só roda manualmente
on:
  workflow_dispatch:

jobs:
  # Fazer o build e push da imagem pro GHCR
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/projectpurpura/api-mg:latest

  # Fazer o deploy no EC2
  deploy-to-ec2:
    needs: build-and-push-image # Espera o build terminar
    runs-on: ubuntu-latest

    steps:
      # Configurar o AWS CLI
      - name: Configurar Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Ligar a Instância
      - name: Ligar Instância EC2 (se estiver parada)
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Dando o comando de Start..."

      # Esperar a Instância acordar
      - name: Esperar Instância ficar 'Running'
        run: |
          echo "Esperando a instância (${{ secrets.EC2_INSTANCE_ID }}) ficar 'running'..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Instância está 'running'! Esperando 20s para o SSH acordar..."
          sleep 20
          echo "Pronto para o deploy!"

      # Deploy via SSH no EC2
      - name: Deploy no EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. Loga o Docker
            echo ${{ secrets.GHCR_PAT }} | sudo docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin
            
            # 2. Puxa a imagem nova
            sudo docker pull ${{ secrets.IMAGE_NAME }}:latest

            # 3. Para o container antigo
            sudo docker stop api-mg || true
            
            # 4. Remove o container antigo
            sudo docker rm api-mg || true
            
            # 5. Sobe o NOVO container
            sudo docker run -d \
              -p 80:8081 \
              --name api-mg \
              --restart unless-stopped \
              --env-file /home/ubuntu/api.env \
              ${{ secrets.IMAGE_NAME }}:latest
            
            # 6. Limpa imagens antigas
            sudo docker image prune -af
